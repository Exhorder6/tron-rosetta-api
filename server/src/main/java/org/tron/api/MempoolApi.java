/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.tron.api;

import org.tron.model.Error;
import org.tron.model.MempoolResponse;
import org.tron.model.MempoolTransactionRequest;
import org.tron.model.MempoolTransactionResponse;
import org.tron.model.NetworkRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-17T15:25:41.238219+08:00[Asia/Shanghai]")

@Validated
@Api(value = "mempool", description = "the mempool API")
public interface MempoolApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /mempool : Get All Mempool Transactions
     * Get all Transaction Identifiers in the mempool
     *
     * @param networkRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Get All Mempool Transactions", nickname = "mempool", notes = "Get all Transaction Identifiers in the mempool", response = MempoolResponse.class, tags={ "Mempool", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = MempoolResponse.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/mempool",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<MempoolResponse> mempool(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkRequest networkRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transaction_identifiers\" : [ { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" }, { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /mempool/transaction : Get a Mempool Transaction
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     *
     * @param mempoolTransactionRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Get a Mempool Transaction", nickname = "mempoolTransaction", notes = "Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.", response = MempoolTransactionResponse.class, tags={ "Mempool", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = MempoolTransactionResponse.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/mempool/transaction",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<MempoolTransactionResponse> mempoolTransaction(@ApiParam(value = "" ,required=true )  @Valid @RequestBody MempoolTransactionRequest mempoolTransactionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : { \"descendant_fees\" : 123923, \"ancestor_count\" : 2 }, \"transaction\" : { \"metadata\" : { \"size\" : 12378, \"lockTime\" : 1582272577 }, \"operations\" : [ { \"amount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : { \"Issuer\" : \"Satoshi\" }, \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"metadata\" : { \"asm\" : \"304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01 03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\", \"hex\" : \"48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\" }, \"related_operations\" : [ { \"index\" : 0, \"operation_identifier\" : { \"index\" : 0 } } ], \"type\" : \"Transfer\", \"account\" : { \"metadata\" : \"{}\", \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\", \"sub_account\" : { \"metadata\" : \"{}\", \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\" } }, \"operation_identifier\" : { \"index\" : 1, \"network_index\" : 0 }, \"status\" : \"Reverted\" }, { \"amount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : { \"Issuer\" : \"Satoshi\" }, \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"metadata\" : { \"asm\" : \"304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01 03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\", \"hex\" : \"48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\" }, \"related_operations\" : [ { \"index\" : 0, \"operation_identifier\" : { \"index\" : 0 } } ], \"type\" : \"Transfer\", \"account\" : { \"metadata\" : \"{}\", \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\", \"sub_account\" : { \"metadata\" : \"{}\", \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\" } }, \"operation_identifier\" : { \"index\" : 1, \"network_index\" : 0 }, \"status\" : \"Reverted\" } ], \"transaction_identifier\" : { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
