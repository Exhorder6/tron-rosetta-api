/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.MetadataRequest;
import com.prokarma.pkmst.model.NetworkListResponse;
import com.prokarma.pkmst.model.NetworkOptionsResponse;
import com.prokarma.pkmst.model.NetworkRequest;
import com.prokarma.pkmst.model.NetworkStatusResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for NetworkApi
 */
@Ignore
public class NetworkApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final NetworkApi api = new NetworkApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Get List of Available Networks
     *
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void networkListTest() throws Exception {
        MetadataRequest metadataRequest = null;
    ResponseEntity<NetworkListResponse> response = api.networkList(metadataRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Get Network Options
     *
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void networkOptionsTest() throws Exception {
        NetworkRequest networkRequest = null;
    ResponseEntity<NetworkOptionsResponse> response = api.networkOptions(networkRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Get Network Status
     *
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void networkStatusTest() throws Exception {
        NetworkRequest networkRequest = null;
    ResponseEntity<NetworkStatusResponse> response = api.networkStatus(networkRequest , accept);

        // TODO: test validations
    }
    
}
