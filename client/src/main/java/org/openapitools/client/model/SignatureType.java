/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * SignatureType is the type of a cryptographic signature. * ecdsa: &#x60;r (32-bytes) || s (32-bytes)&#x60; - &#x60;64 bytes&#x60; * ecdsa_recovery: &#x60;r (32-bytes) || s (32-bytes) || v (1-byte)&#x60; - &#x60;65 bytes&#x60; * ed25519: &#x60;R (32-byte) || s (32-bytes)&#x60; - &#x60;64 bytes&#x60;
 */
@JsonAdapter(SignatureType.Adapter.class)
public enum SignatureType {
  
  ECDSA("ecdsa"),
  
  ECDSA_RECOVERY("ecdsa_recovery"),
  
  ED25519("ed25519");

  private String value;

  SignatureType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SignatureType fromValue(String value) {
    for (SignatureType b : SignatureType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<SignatureType> {
    @Override
    public void write(final JsonWriter jsonWriter, final SignatureType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SignatureType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SignatureType.fromValue(value);
    }
  }
}

