/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConstructionCombineRequest;
import org.openapitools.client.model.ConstructionCombineResponse;
import org.openapitools.client.model.ConstructionDeriveRequest;
import org.openapitools.client.model.ConstructionDeriveResponse;
import org.openapitools.client.model.ConstructionHashRequest;
import org.openapitools.client.model.ConstructionHashResponse;
import org.openapitools.client.model.ConstructionMetadataRequest;
import org.openapitools.client.model.ConstructionMetadataResponse;
import org.openapitools.client.model.ConstructionParseRequest;
import org.openapitools.client.model.ConstructionParseResponse;
import org.openapitools.client.model.ConstructionPayloadsRequest;
import org.openapitools.client.model.ConstructionPayloadsResponse;
import org.openapitools.client.model.ConstructionPreprocessRequest;
import org.openapitools.client.model.ConstructionPreprocessResponse;
import org.openapitools.client.model.ConstructionSubmitRequest;
import org.openapitools.client.model.ConstructionSubmitResponse;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConstructionApi {
    private ApiClient localVarApiClient;

    public ConstructionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConstructionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for constructionCombine
     * @param constructionCombineRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionCombineCall(ConstructionCombineRequest constructionCombineRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionCombineRequest;

        // create path and map variables
        String localVarPath = "/construction/combine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionCombineValidateBeforeCall(ConstructionCombineRequest constructionCombineRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionCombineRequest' is set
        if (constructionCombineRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionCombineRequest' when calling constructionCombine(Async)");
        }
        

        okhttp3.Call localVarCall = constructionCombineCall(constructionCombineRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Network Transaction from Signatures
     * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the &#x60;/construction/submit&#x60; endpoint by the caller.
     * @param constructionCombineRequest  (required)
     * @return ConstructionCombineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionCombineResponse constructionCombine(ConstructionCombineRequest constructionCombineRequest) throws ApiException {
        ApiResponse<ConstructionCombineResponse> localVarResp = constructionCombineWithHttpInfo(constructionCombineRequest);
        return localVarResp.getData();
    }

    /**
     * Create Network Transaction from Signatures
     * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the &#x60;/construction/submit&#x60; endpoint by the caller.
     * @param constructionCombineRequest  (required)
     * @return ApiResponse&lt;ConstructionCombineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionCombineResponse> constructionCombineWithHttpInfo(ConstructionCombineRequest constructionCombineRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionCombineValidateBeforeCall(constructionCombineRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionCombineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Network Transaction from Signatures (asynchronously)
     * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the &#x60;/construction/submit&#x60; endpoint by the caller.
     * @param constructionCombineRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionCombineAsync(ConstructionCombineRequest constructionCombineRequest, final ApiCallback<ConstructionCombineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionCombineValidateBeforeCall(constructionCombineRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionCombineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionDerive
     * @param constructionDeriveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionDeriveCall(ConstructionDeriveRequest constructionDeriveRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionDeriveRequest;

        // create path and map variables
        String localVarPath = "/construction/derive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionDeriveValidateBeforeCall(ConstructionDeriveRequest constructionDeriveRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionDeriveRequest' is set
        if (constructionDeriveRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionDeriveRequest' when calling constructionDerive(Async)");
        }
        

        okhttp3.Call localVarCall = constructionDeriveCall(constructionDeriveRequest, _callback);
        return localVarCall;

    }

    /**
     * Derive an Address from a PublicKey
     * Derive returns the network-specific address associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
     * @param constructionDeriveRequest  (required)
     * @return ConstructionDeriveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionDeriveResponse constructionDerive(ConstructionDeriveRequest constructionDeriveRequest) throws ApiException {
        ApiResponse<ConstructionDeriveResponse> localVarResp = constructionDeriveWithHttpInfo(constructionDeriveRequest);
        return localVarResp.getData();
    }

    /**
     * Derive an Address from a PublicKey
     * Derive returns the network-specific address associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
     * @param constructionDeriveRequest  (required)
     * @return ApiResponse&lt;ConstructionDeriveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionDeriveResponse> constructionDeriveWithHttpInfo(ConstructionDeriveRequest constructionDeriveRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionDeriveValidateBeforeCall(constructionDeriveRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionDeriveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Derive an Address from a PublicKey (asynchronously)
     * Derive returns the network-specific address associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
     * @param constructionDeriveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionDeriveAsync(ConstructionDeriveRequest constructionDeriveRequest, final ApiCallback<ConstructionDeriveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionDeriveValidateBeforeCall(constructionDeriveRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionDeriveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionHash
     * @param constructionHashRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionHashCall(ConstructionHashRequest constructionHashRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionHashRequest;

        // create path and map variables
        String localVarPath = "/construction/hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionHashValidateBeforeCall(ConstructionHashRequest constructionHashRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionHashRequest' is set
        if (constructionHashRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionHashRequest' when calling constructionHash(Async)");
        }
        

        okhttp3.Call localVarCall = constructionHashCall(constructionHashRequest, _callback);
        return localVarCall;

    }

    /**
     * Get the Hash of a Signed Transaction
     * TransactionHash returns the network-specific transaction hash for a signed transaction.
     * @param constructionHashRequest  (required)
     * @return ConstructionHashResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionHashResponse constructionHash(ConstructionHashRequest constructionHashRequest) throws ApiException {
        ApiResponse<ConstructionHashResponse> localVarResp = constructionHashWithHttpInfo(constructionHashRequest);
        return localVarResp.getData();
    }

    /**
     * Get the Hash of a Signed Transaction
     * TransactionHash returns the network-specific transaction hash for a signed transaction.
     * @param constructionHashRequest  (required)
     * @return ApiResponse&lt;ConstructionHashResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionHashResponse> constructionHashWithHttpInfo(ConstructionHashRequest constructionHashRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionHashValidateBeforeCall(constructionHashRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionHashResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Hash of a Signed Transaction (asynchronously)
     * TransactionHash returns the network-specific transaction hash for a signed transaction.
     * @param constructionHashRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionHashAsync(ConstructionHashRequest constructionHashRequest, final ApiCallback<ConstructionHashResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionHashValidateBeforeCall(constructionHashRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionHashResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionMetadata
     * @param constructionMetadataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionMetadataCall(ConstructionMetadataRequest constructionMetadataRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionMetadataRequest;

        // create path and map variables
        String localVarPath = "/construction/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionMetadataValidateBeforeCall(ConstructionMetadataRequest constructionMetadataRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionMetadataRequest' is set
        if (constructionMetadataRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionMetadataRequest' when calling constructionMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = constructionMetadataCall(constructionMetadataRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Metadata for Transaction Construction
     * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is often created by calling &#x60;/construction/preprocess&#x60; in an offline environment. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in &#x60;/construction/payloads&#x60;). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
     * @param constructionMetadataRequest  (required)
     * @return ConstructionMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionMetadataResponse constructionMetadata(ConstructionMetadataRequest constructionMetadataRequest) throws ApiException {
        ApiResponse<ConstructionMetadataResponse> localVarResp = constructionMetadataWithHttpInfo(constructionMetadataRequest);
        return localVarResp.getData();
    }

    /**
     * Get Metadata for Transaction Construction
     * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is often created by calling &#x60;/construction/preprocess&#x60; in an offline environment. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in &#x60;/construction/payloads&#x60;). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
     * @param constructionMetadataRequest  (required)
     * @return ApiResponse&lt;ConstructionMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionMetadataResponse> constructionMetadataWithHttpInfo(ConstructionMetadataRequest constructionMetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionMetadataValidateBeforeCall(constructionMetadataRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Metadata for Transaction Construction (asynchronously)
     * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is often created by calling &#x60;/construction/preprocess&#x60; in an offline environment. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in &#x60;/construction/payloads&#x60;). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
     * @param constructionMetadataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionMetadataAsync(ConstructionMetadataRequest constructionMetadataRequest, final ApiCallback<ConstructionMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionMetadataValidateBeforeCall(constructionMetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionParse
     * @param constructionParseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionParseCall(ConstructionParseRequest constructionParseRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionParseRequest;

        // create path and map variables
        String localVarPath = "/construction/parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionParseValidateBeforeCall(ConstructionParseRequest constructionParseRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionParseRequest' is set
        if (constructionParseRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionParseRequest' when calling constructionParse(Async)");
        }
        

        okhttp3.Call localVarCall = constructionParseCall(constructionParseRequest, _callback);
        return localVarCall;

    }

    /**
     * Parse a Transaction
     * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after &#x60;/construction/payloads&#x60;) and before broadcast (after &#x60;/construction/combine&#x60;). 
     * @param constructionParseRequest  (required)
     * @return ConstructionParseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionParseResponse constructionParse(ConstructionParseRequest constructionParseRequest) throws ApiException {
        ApiResponse<ConstructionParseResponse> localVarResp = constructionParseWithHttpInfo(constructionParseRequest);
        return localVarResp.getData();
    }

    /**
     * Parse a Transaction
     * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after &#x60;/construction/payloads&#x60;) and before broadcast (after &#x60;/construction/combine&#x60;). 
     * @param constructionParseRequest  (required)
     * @return ApiResponse&lt;ConstructionParseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionParseResponse> constructionParseWithHttpInfo(ConstructionParseRequest constructionParseRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionParseValidateBeforeCall(constructionParseRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionParseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parse a Transaction (asynchronously)
     * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after &#x60;/construction/payloads&#x60;) and before broadcast (after &#x60;/construction/combine&#x60;). 
     * @param constructionParseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionParseAsync(ConstructionParseRequest constructionParseRequest, final ApiCallback<ConstructionParseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionParseValidateBeforeCall(constructionParseRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionParseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionPayloads
     * @param constructionPayloadsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionPayloadsCall(ConstructionPayloadsRequest constructionPayloadsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionPayloadsRequest;

        // create path and map variables
        String localVarPath = "/construction/payloads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionPayloadsValidateBeforeCall(ConstructionPayloadsRequest constructionPayloadsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionPayloadsRequest' is set
        if (constructionPayloadsRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionPayloadsRequest' when calling constructionPayloads(Async)");
        }
        

        okhttp3.Call localVarCall = constructionPayloadsCall(constructionPayloadsRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate an Unsigned Transaction and Signing Payloads
     * Payloads is called with an array of operations and the response from &#x60;/construction/metadata&#x60;. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular addresses using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \&quot;effects\&quot; of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \&quot;intent\&quot; of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
     * @param constructionPayloadsRequest  (required)
     * @return ConstructionPayloadsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionPayloadsResponse constructionPayloads(ConstructionPayloadsRequest constructionPayloadsRequest) throws ApiException {
        ApiResponse<ConstructionPayloadsResponse> localVarResp = constructionPayloadsWithHttpInfo(constructionPayloadsRequest);
        return localVarResp.getData();
    }

    /**
     * Generate an Unsigned Transaction and Signing Payloads
     * Payloads is called with an array of operations and the response from &#x60;/construction/metadata&#x60;. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular addresses using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \&quot;effects\&quot; of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \&quot;intent\&quot; of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
     * @param constructionPayloadsRequest  (required)
     * @return ApiResponse&lt;ConstructionPayloadsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionPayloadsResponse> constructionPayloadsWithHttpInfo(ConstructionPayloadsRequest constructionPayloadsRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionPayloadsValidateBeforeCall(constructionPayloadsRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionPayloadsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an Unsigned Transaction and Signing Payloads (asynchronously)
     * Payloads is called with an array of operations and the response from &#x60;/construction/metadata&#x60;. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular addresses using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \&quot;effects\&quot; of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \&quot;intent\&quot; of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
     * @param constructionPayloadsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionPayloadsAsync(ConstructionPayloadsRequest constructionPayloadsRequest, final ApiCallback<ConstructionPayloadsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionPayloadsValidateBeforeCall(constructionPayloadsRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionPayloadsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionPreprocess
     * @param constructionPreprocessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionPreprocessCall(ConstructionPreprocessRequest constructionPreprocessRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionPreprocessRequest;

        // create path and map variables
        String localVarPath = "/construction/preprocess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionPreprocessValidateBeforeCall(ConstructionPreprocessRequest constructionPreprocessRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionPreprocessRequest' is set
        if (constructionPreprocessRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionPreprocessRequest' when calling constructionPreprocess(Async)");
        }
        

        okhttp3.Call localVarCall = constructionPreprocessCall(constructionPreprocessRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a Request to Fetch Metadata
     * Preprocess is called prior to &#x60;/construction/payloads&#x60; to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The request returned from this method will be used by the caller (in a different execution environment) to call the &#x60;/construction/metadata&#x60; endpoint.
     * @param constructionPreprocessRequest  (required)
     * @return ConstructionPreprocessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionPreprocessResponse constructionPreprocess(ConstructionPreprocessRequest constructionPreprocessRequest) throws ApiException {
        ApiResponse<ConstructionPreprocessResponse> localVarResp = constructionPreprocessWithHttpInfo(constructionPreprocessRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Request to Fetch Metadata
     * Preprocess is called prior to &#x60;/construction/payloads&#x60; to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The request returned from this method will be used by the caller (in a different execution environment) to call the &#x60;/construction/metadata&#x60; endpoint.
     * @param constructionPreprocessRequest  (required)
     * @return ApiResponse&lt;ConstructionPreprocessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionPreprocessResponse> constructionPreprocessWithHttpInfo(ConstructionPreprocessRequest constructionPreprocessRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionPreprocessValidateBeforeCall(constructionPreprocessRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionPreprocessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Request to Fetch Metadata (asynchronously)
     * Preprocess is called prior to &#x60;/construction/payloads&#x60; to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The request returned from this method will be used by the caller (in a different execution environment) to call the &#x60;/construction/metadata&#x60; endpoint.
     * @param constructionPreprocessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionPreprocessAsync(ConstructionPreprocessRequest constructionPreprocessRequest, final ApiCallback<ConstructionPreprocessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionPreprocessValidateBeforeCall(constructionPreprocessRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionPreprocessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionSubmit
     * @param constructionSubmitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionSubmitCall(ConstructionSubmitRequest constructionSubmitRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionSubmitRequest;

        // create path and map variables
        String localVarPath = "/construction/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionSubmitValidateBeforeCall(ConstructionSubmitRequest constructionSubmitRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionSubmitRequest' is set
        if (constructionSubmitRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionSubmitRequest' when calling constructionSubmit(Async)");
        }
        

        okhttp3.Call localVarCall = constructionSubmitCall(constructionSubmitRequest, _callback);
        return localVarCall;

    }

    /**
     * Submit a Signed Transaction
     * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
     * @param constructionSubmitRequest  (required)
     * @return ConstructionSubmitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionSubmitResponse constructionSubmit(ConstructionSubmitRequest constructionSubmitRequest) throws ApiException {
        ApiResponse<ConstructionSubmitResponse> localVarResp = constructionSubmitWithHttpInfo(constructionSubmitRequest);
        return localVarResp.getData();
    }

    /**
     * Submit a Signed Transaction
     * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
     * @param constructionSubmitRequest  (required)
     * @return ApiResponse&lt;ConstructionSubmitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionSubmitResponse> constructionSubmitWithHttpInfo(ConstructionSubmitRequest constructionSubmitRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionSubmitValidateBeforeCall(constructionSubmitRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionSubmitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Signed Transaction (asynchronously)
     * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
     * @param constructionSubmitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Expected response to a valid request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionSubmitAsync(ConstructionSubmitRequest constructionSubmitRequest, final ApiCallback<ConstructionSubmitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionSubmitValidateBeforeCall(constructionSubmitRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionSubmitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
